<?php

namespace Digitar\AssurexBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends \Doctrine\ORM\EntityRepository
{
    public function getMemberWithTypeContrat(array $contrattypeNames){
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->innerJoin('a.typeContrats', 'tc')
            ->addSelect('tc')
        ;

        // Puis on filtre sur le nom des conrats type à l'aide d'un IN
        $qb->where($qb->expr()->in('tc.name', $contrattypeNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult()
            ;

    }

    public function getMembers($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('m')
            // Jointure sur l'attribut image
            ->leftJoin('m.photo', 'p')
            ->addSelect('p')
            // Jointure sur l'attribut categories
            ->leftJoin('m.transactions', 't')
            ->addSelect('t')
            ->orderBy('t.date', 'DESC')
            ->getQuery()
        ;
        $query
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage)
        ;

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }
}
